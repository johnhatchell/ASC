"use client";

import React, { useEffect, useMemo, useRef, useState } from "react";
import { motion } from "framer-motion";
import { Download, Plus, Trash2, Upload, Copy, RefreshCw } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";

// --- Types
interface ProcRow {
  id: string;
  name: string;
  reimbursement: number;
  implant: number;
  anesthesia: number;
  fte: number;
  fixed: number;
  soft: number;
  payer?: "Commercial" | "CMS" | "Other";
}

// --- Helpers
const money = new Intl.NumberFormat(undefined, { style: "currency", currency: "USD", maximumFractionDigits: 0 });
const pct = (v: number) => `${(v * 100).toFixed(1)}%`;

const derive = (r: ProcRow) => {
  const totalCosts = r.implant + r.anesthesia + r.fte + r.fixed + r.soft;
  const margin = r.reimbursement - totalCosts;
  const marginPct = r.reimbursement > 0 ? margin / r.reimbursement : 0;
  return { totalCosts, margin, marginPct };
};

const uid = () => Math.random().toString(36).slice(2, 10);

const SAMPLE: ProcRow[] = [
  { id: uid(), name: "Total Knee Arthroplasty", reimbursement: 9800, implant: 3100, anesthesia: 800, fte: 1200, fixed: 1500, soft: 400, payer: "Commercial" },
  { id: uid(), name: "Total Hip Arthroplasty", reimbursement: 9500, implant: 4300, anesthesia: 800, fte: 1200, fixed: 1500, soft: 400, payer: "CMS" },
  { id: uid(), name: "Shoulder Arthroscopy", reimbursement: 5200, implant: 1200, anesthesia: 600, fte: 800, fixed: 1000, soft: 300, payer: "Commercial" },
];

const STORAGE_KEY = "asc-proc-margin-v2";

export default function App() {
  const [rows, setRows] = useState<ProcRow[]>(() => {
    if (typeof window !== "undefined") {
      try {
        const raw = window.localStorage.getItem(STORAGE_KEY);
        if (raw) return JSON.parse(raw);
      } catch {}
    }
    return SAMPLE;
  });

  const [defaults, setDefaults] = useState({ implant: 0, anesthesia: 0, fte: 0, fixed: 0, soft: 0 });
  const [payerTargets, setPayerTargets] = useState({ commercial: 0.20, cms: 0.10, other: 0.0 });
  const [overheadItems, setOverheadItems] = useState<{ id: string; label: string; monthly: number; }[]>([
    { id: uid(), label: "Rent", monthly: 0 },
    { id: uid(), label: "Utilities", monthly: 0 },
    { id: uid(), label: "Admin Overhead", monthly: 0 },
  ]);
  const [monthlyVolume, setMonthlyVolume] = useState(0);
  const [applyOverheadAsFixed, setApplyOverheadAsFixed] = useState(false);
  const fileRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(rows));
  }, [rows]);

  const totals = useMemo(() => {
    const agg = rows.reduce(
      (a, r) => {
        const d = derive(r);
        a.reimb += r.reimbursement;
        a.costs += d.totalCosts;
        a.margin += d.margin;
        return a;
      },
      { reimb: 0, costs: 0, margin: 0 }
    );
    return { ...agg, marginPct: agg.reimb > 0 ? agg.margin / agg.reimb : 0 };
  }, [rows]);

  const totalOverheadMonthly = useMemo(() => overheadItems.reduce((s, i) => s + (Number(i.monthly) || 0), 0), [overheadItems]);
  const overheadPerCase = useMemo(() => (monthlyVolume > 0 ? totalOverheadMonthly / monthlyVolume : 0), [totalOverheadMonthly, monthlyVolume]);

  const addRow = () =>
    setRows((s) => [
      ...s,
      {
        id: uid(),
        name: "New Procedure",
        reimbursement: 0,
        implant: defaults.implant,
        anesthesia: defaults.anesthesia,
        fte: defaults.fte,
        fixed: defaults.fixed + (applyOverheadAsFixed ? overheadPerCase : 0),
        soft: defaults.soft,
        payer: "Commercial",
      },
    ]);

  const removeRow = (id: string) => setRows((s) => s.filter((r) => r.id !== id));
  const duplicateRow = (id: string) =>
    setRows((s) => {
      const r = s.find((x) => x.id === id);
      if (!r) return s;
      const copy: ProcRow = { ...r, id: uid(), name: `${r.name} (copy)` };
      return [...s, copy];
    });

  const resetSample = () => setRows(SAMPLE.map((r) => ({ ...r, id: uid() })));

  const update = (id: string, field: keyof ProcRow, value: string) => {
    setRows((s) =>
      s.map((r) =>
        r.id === id
          ? {
              ...r,
              [field]: field === "name" || field === "payer" ? (value as any) : Number(value.replace(/[^0-9.\-]/g, "")) || 0,
            }
          : r
      )
    );
  };

  const exportCSV = () => {
    const header = [
      "Procedure Type",
      "Payer",
      "Reimbursement",
      "Implant",
      "Anesthesia",
      "FTE",
      "Fixed",
      "Soft",
      "Total Costs",
      "Margin",
      "Margin %",
      "Profit",
    ];
    const lines = rows.map((r) => {
      const d = derive(r);
      return [
        r.name,
        r.payer ?? "",
        r.reimbursement,
        r.implant,
        r.anesthesia,
        r.fte,
        r.fixed,
        r.soft,
        d.totalCosts,
        d.margin,
        d.marginPct,
        d.margin,
      ].join(",");
    });
    const csv = [header.join(","), ...lines, "Totals,,,,,,,," + [totals.costs, totals.margin, totals.marginPct, totals.margin].join(",")].join("\n");
    const blob = new Blob([csv], { type: "text/csv" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "asc-procedural-margins.csv";
    a.click();
    URL.revokeObjectURL(url);
  };

  const exportJSON = () => {
    const blob = new Blob([JSON.stringify(rows, null, 2)], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "asc-procedural-margins.json";
    a.click();
    URL.revokeObjectURL(url);
  };

  const exportXLSX = async () => {
    const XLSX = await import("xlsx");
    const sheetRows = rows.map((r) => {
      const d = derive(r);
      return {
        Procedure: r.name,
        Payer: r.payer ?? "",
        Reimbursement: r.reimbursement,
        Implant: r.implant,
        Anesthesia: r.anesthesia,
        FTE: r.fte,
        Fixed: r.fixed,
        Soft: r.soft,
        TotalCosts: d.totalCosts,
        Margin: d.margin,
        MarginPct: d.marginPct,
      };
    });
    sheetRows.push({
      Procedure: "Totals",
      Payer: "",
      Reimbursement: totals.reimb,
      Implant: "",
      Anesthesia: "",
      FTE: "",
      Fixed: "",
      Soft: "",
      TotalCosts: totals.costs,
      Margin: totals.margin,
      MarginPct: totals.marginPct,
    });
    const ws = XLSX.utils.json_to_sheet(sheetRows);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, "ASC Margins");
    const wbout = XLSX.write(wb, { bookType: "xlsx", type: "array" });
    const blob = new Blob([wbout], { type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "asc-procedural-margins.xlsx";
    a.click();
    URL.revokeObjectURL(url);
  };

  const importJSON = async (file: File) => {
    try {
      const text = await file.text();
      const data = JSON.parse(text);
      if (!Array.isArray(data)) throw new Error("Invalid file");
      const cleaned: ProcRow[] = data.map((r: any) => ({
        id: uid(),
        name: String(r.name ?? r.ProcedureType ?? r["Procedure Type"] ?? "Imported"),
        reimbursement: Number(r.reimbursement ?? r["Reimbursement ($)"] ?? r.Reimbursement ?? 0),
        implant: Number(r.implant ?? r["Implant Cost ($)"] ?? r.Implant ?? 0),
        anesthesia: Number(r.anesthesia ?? r["Anesthesia Cost ($)"] ?? r.Anesthesia ?? 0),
        fte: Number(r.fte ?? r["FTE Expense ($)"] ?? r.FTE ?? 0),
        fixed: Number(r.fixed ?? r["Fixed Costs ($)"] ?? r.Fixed ?? 0),
        soft: Number(r.soft ?? r["Soft Costs ($)"] ?? r.Soft ?? 0),
        payer: (r.payer ?? r.Payer ?? "Commercial") as any,
      }));
      setRows(cleaned);
    } catch (e) {
      alert("Could not import file: " + (e as Error).message);
    }
  };

  return (
    <div className="min-h-screen bg-slate-50 p-6">
      <div className="mx-auto max-w-7xl space-y-6">
        <header className="flex flex-col gap-3 sm:flex-row sm:items-end sm:justify-between">
          <div>
            <h1 className="text-2xl font-semibold tracking-tight">ASC Procedural Margin Calculator</h1>
            <p className="text-sm text-slate-600">Edit inputs inline. Add procedures, set defaults, allocate overhead, set payer targets, and export CSV/JSON/Excel. Data persists in your browser.</p>
          </div>
          <div className="flex flex-wrap gap-2">
            <Button onClick={addRow} className="gap-2"><Plus size={16}/> Add Procedure</Button>
            <Button variant="secondary" onClick={exportCSV} className="gap-2"><Download size={16}/> Export CSV</Button>
            <Button variant="secondary" onClick={exportJSON} className="gap-2"><Download size={16}/> Export JSON</Button>
            <Button variant="secondary" onClick={exportXLSX} className="gap-2"><Download size={16}/> Export Excel</Button>
            <Button variant="outline" onClick={resetSample} className="gap-2"><RefreshCw size={16}/> Reset Sample</Button>
            <input ref={fileRef} type="file" accept="application/json,.json" className="hidden" onChange={(e)=>{const f=e.target.files?.[0]; if(f) importJSON(f);}} />
            <Button variant="outline" onClick={()=>fileRef.current?.click()} className="gap-2"><Upload size={16}/> Import JSON</Button>
          </div>
        </header>

        {/* Defaults Card */}
        <Card className="shadow-sm">
          <CardHeader>
            <CardTitle className="text-base">Quick Defaults (applied to new rows)</CardTitle>
          </CardHeader>
          <CardContent className="grid grid-cols-2 gap-4 sm:grid-cols-6">
            {(["implant","anesthesia","fte","fixed","soft"] as const).map((key)=> (
              <div key={key} className="space-y-1">
                <Label className="text-xs capitalize">{key} ($)</Label>
                <Input
                  inputMode="decimal"
                  value={defaults[key]}
                  onChange={(e)=> setDefaults((d)=> ({...d, [key]: Number(e.target.value.replace(/[^0-9.\-]/g, "")) || 0}))}
                />
              </div>
            ))}
          </CardContent>
        </Card>

        {/* Overhead Allocator */}
        <Card className="shadow-sm">
          <CardHeader>
            <CardTitle className="text-base">Monthly Overhead Allocator → Per-Case</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 gap-3 sm:grid-cols-3">
              {overheadItems.map((it) => (
                <div key={it.id} className="flex items-end gap-2">
                  <div className="flex-1">
                    <Label className="text-xs">Label</Label>
                    <Input value={it.label} onChange={(e)=> setOverheadItems((arr)=> arr.map((x)=> x.id===it.id? {...x, label: e.target.value}: x))} />
                  </div>
                  <div className="w-40">
                    <Label className="text-xs">Monthly ($)</Label>
                    <Input inputMode="decimal" value={it.monthly}
                      onChange={(e)=> setOverheadItems((arr)=> arr.map((x)=> x.id===it.id? {...x, monthly: Number(e.target.value.replace(/[^0-9.\-]/g, "")) || 0}: x))}
                    />
                  </div>
                </div>
              ))}
            </div>
            <div className="flex flex-wrap items-center gap-2">
              <Button variant="outline" onClick={()=> setOverheadItems((a)=> [...a, { id: uid(), label: "New Overhead", monthly: 0 }])}><Plus size={16}/> Add Overhead</Button>
              <div className="ml-auto flex flex-wrap items-end gap-4">
                <div>
                  <Label className="text-xs">Expected Monthly Case Volume</Label>
                  <Input className="w-48" inputMode="decimal" value={monthlyVolume} onChange={(e)=> setMonthlyVolume(Number(e.target.value.replace(/[^0-9.\-]/g, "")) || 0)} />
                </div>
                <div className="text-sm">
                  <div>Total Monthly Overhead: <span className="font-medium">{money.format(totalOverheadMonthly)}</span></div>
                  <div>Per-Case Overhead: <span className="font-semibold">{money.format(overheadPerCase)}</span></div>
                </div>
                <label className="flex items-center gap-2 text-sm">
                  <input type="checkbox" checked={applyOverheadAsFixed} onChange={(e)=> setApplyOverheadAsFixed(e.target.checked)} /> Apply to new rows
                </label>
                <Button onClick={()=> setRows((s)=> s.map((r)=> ({...r, fixed: defaults.fixed + overheadPerCase })))}>
                  Apply per-case overhead to Fixed (all rows)
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Payer Targets */}
        <Card className="shadow-sm">
          <CardHeader>
            <CardTitle className="text-base">Payer Mix Targets</CardTitle>
          </CardHeader>
          <CardContent className="grid grid-cols-1 gap-4 sm:grid-cols-3">
            <div>
              <Label className="text-xs">Commercial Target Margin</Label>
              <Input inputMode="decimal" value={payerTargets.commercial}
                     onChange={(e)=> setPayerTargets((p)=> ({...p, commercial: Number(e.target.value) || 0}))} />
              <p className="text-xs text-slate-500 mt-1">Default 0.20 (20%)</p>
            </div>
            <div>
              <Label className="text-xs">CMS Target Margin</Label>
              <Input inputMode="decimal" value={payerTargets.cms}
                     onChange={(e)=> setPayerTargets((p)=> ({...p, cms: Number(e.target.value) || 0}))} />
              <p className="text-xs text-slate-500 mt-1">Default 0.10 (10%)</p>
            </div>
            <div>
              <Label className="text-xs">Other Target Margin</Label>
              <Input inputMode="decimal" value={payerTargets.other}
                     onChange={(e)=> setPayerTargets((p)=> ({...p, other: Number(e.target.value) || 0}))} />
            </div>
          </CardContent>
        </Card>

        {/* Table */}
        <Card className="shadow-sm">
          <CardHeader>
            <CardTitle className="text-base">Procedures</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="overflow-x-auto">
              <table className="w-full text-sm">
                <thead>
                  <tr className="bg-slate-100 text-slate-700">
                    <th className="p-2 text-left">Procedure</th>
                    <th className="p-2 text-left">Payer</th>
                    <th className="p-2 text-right">Reimbursement</th>
                    <th className="p-2 text-right">Implant</th>
                    <th className="p-2 text-right">Anesthesia</th>
                    <th className="p-2 text-right">FTE</th>
                    <th className="p-2 text-right">Fixed</th>
                    <th className="p-2 text-right">Soft</th>
                    <th className="p-2 text-right">Total Costs</th>
                    <th className="p-2 text-right">Margin</th>
                    <th className="p-2 text-right">Margin %</th>
                    <th className="p-2 text-right">vs Target</th>
                    <th className="p-2 text-right">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {rows.map((r) => {
                    const d = derive(r);
                    const target = r.payer === "Commercial" ? payerTargets.commercial : r.payer === "CMS" ? payerTargets.cms : payerTargets.other;
                    const delta = d.marginPct - target;
                    return (
                      <motion.tr key={r.id} initial={{opacity:0, y:6}} animate={{opacity:1, y:0}} className="border-b">
                        <td className="p-2 min-w-[220px]">
                          <Input value={r.name} onChange={(e)=> update(r.id, "name", e.target.value)} />
                        </td>
                        <td className="p-2 min-w-[140px]">
                          <select className="w-full rounded-md border px-2 py-2 text-sm" value={r.payer ?? "Commercial"} onChange={(e)=> update(r.id, "payer", e.target.value)}>
                            <option>Commercial</option>
                            <option>CMS</option>
                            <option>Other</option>
                          </select>
                        </td>
                        <td className="p-2 text-right min-w-[120px]">
                          <Input className="text-right" inputMode="decimal" value={r.reimbursement}
                                 onChange={(e)=> update(r.id, "reimbursement", e.target.value)} />
                        </td>
                        <td className="p-2 text-right">
                          <Input className="text-right" inputMode="decimal" value={r.implant}
                                 onChange={(e)=> update(r.id, "implant", e.target.value)} />
                        </td>
                        <td className="p-2 text-right">
                          <Input className="text-right" inputMode="decimal" value={r.anesthesia}
                                 onChange={(e)=> update(r.id, "anesthesia", e.target.value)} />
                        </td>
                        <td className="p-2 text-right">
                          <Input className="text-right" inputMode="decimal" value={r.fte}
                                 onChange={(e)=> update(r.id, "fte", e.target.value)} />
                        </td>
                        <td className="p-2 text-right">
                          <Input className="text-right" inputMode="decimal" value={r.fixed}
                                 onChange={(e)=> update(r.id, "fixed", e.target.value)} />
                        </td>
                        <td className="p-2 text-right">
                          <Input className="text-right" inputMode="decimal" value={r.soft}
                                 onChange={(e)=> update(r.id, "soft", e.target.value)} />
                        </td>
                        <td className="p-2 text-right font-medium">{money.format(d.totalCosts)}</td>
                        <td className={`p-2 text-right font-semibold ${d.margin >= 0 ? "text-emerald-700" : "text-rose-700"}`}>{money.format(d.margin)}</td>
                        <td className={`p-2 text-right ${d.margin >= 0 ? "text-emerald-700" : "text-rose-700"}`}>{pct(d.marginPct)}</td>
                        <td className={`p-2 text-right ${delta >= 0 ? "text-emerald-700" : "text-rose-700"}`}>{(delta*100).toFixed(1)}%</td>
                        <td className="p-2 text-right">
                          <div className="flex justify-end gap-1">
                            <Button variant="ghost" size="icon" onClick={()=> duplicateRow(r.id)} title="Duplicate"><Copy size={16}/></Button>
                            <Button variant="ghost" size="icon" onClick={()=> removeRow(r.id)} title="Delete"><Trash2 size={16}/></Button>
                          </div>
                        </td>
                      </motion.tr>
                    );
                  })}
                </tbody>
                <tfoot>
                  <tr className="bg-slate-50 font-medium">
                    <td className="p-2">Totals</td>
                    <td></td>
                    <td className="p-2 text-right">{money.format(totals.reimb)}</td>
                    <td className="p-2" colSpan={5}></td>
                    <td className="p-2 text-right">{money.format(totals.costs)}</td>
                    <td className="p-2 text-right">{money.format(totals.margin)}</td>
                    <td className="p-2 text-right">{pct(totals.marginPct)}</td>
                    <td></td>
                    <td></td>
                  </tr>
                </tfoot>
              </table>
            </div>
          </CardContent>
        </Card>

        {/* Notes */}
        <Card className="shadow-sm">
          <CardHeader>
            <CardTitle className="text-base">Notes</CardTitle>
          </CardHeader>
          <CardContent className="text-sm text-slate-600 space-y-2">
            <p>• Profit is treated as margin here (Revenue − Total Costs).</p>
            <p>• Use the <span className="font-medium">Overhead Allocator</span> to convert monthly overhead into a per‑case fixed cost and apply it across rows.</p>
            <p>• Payer targets default to <span className="font-medium">20% Commercial</span> and <span className="font-medium">10% CMS</span>. The table shows the delta between actual and target.</p>
            <p>• Import/Export lets you move scenarios between browsers or versions. Use <span className="font-medium">Export Excel</span> for an .xlsx workbook.</p>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
